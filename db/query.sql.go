// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name) VALUES (?)
RETURNING id, name, created_at
`

func (q *Queries) CreateProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, name)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const createRequest = `-- name: CreateRequest :one
INSERT INTO requests (
  project_id,
  name,
  curl,
  method,
  url,
  headers,
  body
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, project_id, name, curl, method, url, headers, body, created_at, updated_at
`

type CreateRequestParams struct {
	ProjectID int64
	Name      string
	Curl      string
	Method    string
	Url       string
	Headers   sql.NullString
	Body      sql.NullString
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, createRequest,
		arg.ProjectID,
		arg.Name,
		arg.Curl,
		arg.Method,
		arg.Url,
		arg.Headers,
		arg.Body,
	)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Curl,
		&i.Method,
		&i.Url,
		&i.Headers,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM requests
WHERE id = ?
`

func (q *Queries) DeleteRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRequest, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, created_at FROM projects
WHERE name = ? LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, name)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, name, created_at FROM projects
WHERE id = ? LIMIT 1
`

func (q *Queries) GetProjectById(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getRequest = `-- name: GetRequest :one
SELECT id, project_id, name, curl, method, url, headers, body, created_at, updated_at FROM requests
WHERE project_id = ? AND name = ? LIMIT 1
`

type GetRequestParams struct {
	ProjectID int64
	Name      string
}

func (q *Queries) GetRequest(ctx context.Context, arg GetRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, getRequest, arg.ProjectID, arg.Name)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Curl,
		&i.Method,
		&i.Url,
		&i.Headers,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSelectedProject = `-- name: GetSelectedProject :one
SELECT project_id FROM selected_project LIMIT 1
`

func (q *Queries) GetSelectedProject(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSelectedProject)
	var project_id int64
	err := row.Scan(&project_id)
	return project_id, err
}

const listAllProjects = `-- name: ListAllProjects :many
SELECT id, name, created_at FROM projects
ORDER BY name
`

func (q *Queries) ListAllProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllRequests = `-- name: ListAllRequests :many
SELECT id, project_id, name, curl, method, url, headers, body, created_at, updated_at FROM requests
ORDER BY name
`

func (q *Queries) ListAllRequests(ctx context.Context) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, listAllRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Curl,
			&i.Method,
			&i.Url,
			&i.Headers,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectRequests = `-- name: ListProjectRequests :many
SELECT id, project_id, name, curl, method, url, headers, body, created_at, updated_at FROM requests
WHERE project_id = ?
ORDER BY name
`

func (q *Queries) ListProjectRequests(ctx context.Context, projectID int64) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, listProjectRequests, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Curl,
			&i.Method,
			&i.Url,
			&i.Headers,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSelectedProject = `-- name: SetSelectedProject :exec
INSERT OR REPLACE INTO selected_project (rowid, project_id) VALUES (1, ?)
`

func (q *Queries) SetSelectedProject(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, setSelectedProject, projectID)
	return err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects
set name = ?
WHERE id = ?
`

type UpdateProjectParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject, arg.Name, arg.ID)
	return err
}

const updateRequest = `-- name: UpdateRequest :exec
UPDATE requests
set name = ?
WHERE id = ?
`

type UpdateRequestParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateRequest(ctx context.Context, arg UpdateRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateRequest, arg.Name, arg.ID)
	return err
}
